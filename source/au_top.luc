module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output outled,           // to LED strip, Br pin C49, connect LED Strip to 5V for power
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {

  sig rst;                  // reset signal
  
//  counter slowclock(#SIZE(1), #DIV(26), .clk(clk), .rst(rst));
  counter countup(#SIZE(4), #DIV(26), #TOP(15), .clk(clk), .rst(rst));
  ws2812b_writer led_strip(#PIXEL_COUNT(64), .clk(clk), .rst(rst)); //set for 64 pixels
  rom rom(.ctr(countup.value), .clk(clk), .rst(rst));
  rom_decoder rom_decoder(.rom_maze(rom.out), .player_pos(b01100000), .clk(clk), .rst(rst));

  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    dff ledcolor[64][24];
  }

  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset

    usb_tx = usb_rx;        // loop serial port

    led = 8h00;             // turn LEDs off

    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits

    ledcolor.d =rom_decoder.out;
    
    led_strip.update=1; //sample write 
      io_led[0] = rom.out[0][7:0];
      io_led[1] = rom.out[0][15:8];
      io_led[2] = countup.value;
    
    led_strip.color=ledcolor.q[led_strip.pixel]; 
    outled=led_strip.led;
  }
}