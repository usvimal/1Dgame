module game_miniBeta (
    input clk,  // clock
    input rst,  // reset
    
    //physical inputs
    input left_button,
    input right_button,
        
    
    output screen_output[64][24],
    output state_number,  
    output decimal_counter_increase,
    output player_pos[8]
//    output decimal_counter_rst
  ) {

  //temp variables
  sig inputAlu_a[16];
  sig inputAlu_b[16];
  
  alu alu;
  .clk(clk){
    .rst(rst){
      game_Control_Unit control_unit;
      regfile regfile;
      
    }
  }
    
  
  always {
    //pass button inputs to control unit
    control_unit.right_button = right_button;
    control_unit.left_button = left_button;
    
    screen_output = control_unit.screen_output;
    // DEBUG
    state_number = control_unit.state_number;
    
    //setup regfile
    regfile.read_address_a = control_unit.regfile_read_address_a;
    regfile.read_address_b = control_unit.regfile_read_address_b;
    regfile.write_address = control_unit.regfile_write_address;
    regfile.write_enable = control_unit.we_regfile;
    
    //
    control_unit.player_position_in = regfile.position_out;
    
    //TEST dec counter increase
    decimal_counter_increase = left_button & right_button;
    
    //setup asel 
    case(control_unit.asel){
      b00  : inputAlu_a = regfile.read_data_a;
      b01  : inputAlu_a = 16h01;
      b10  : inputAlu_a = 16h03;
      b11  : inputAlu_a = 16h1F;

      default : 
        inputAlu_a = 0;
    }
    
    //setup bsel
    case(control_unit.bsel){
      b00 : inputAlu_b = regfile.read_data_b;
      b01 : inputAlu_b = 16h01;
      b10  : inputAlu_b = 16h80;
      b11  : inputAlu_b = 16h08;

      default: 
        inputAlu_b = 0;
      
    }
    
    //ALU
    alu.x = inputAlu_a;
    alu.y = inputAlu_b;
    alu.alufn = control_unit.alufn;
    
    
    //wdsel mux
    case (control_unit.wdsel){
      b01 : regfile.write_data = 16h0000;
      b11 : regfile.write_data= 16h0001;
      b10 : regfile.write_data = regfile.last_row_out;
      default:
        regfile.write_data = alu.out;
    
    
    }
    player_pos = regfile.position_out;
    
  }
}