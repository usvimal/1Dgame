module regfile (
    input clk,  // clock
    input rst,  // reset
    input read_address_a[4],
    input read_address_b[4],
    input write_address[4],
    input write_data[16],
    input write_enable,
    output read_data_a[16],
    output read_data_b[16]
    
    //debug
//    output score_out[16],
//    output level_out[16],
//    output row_out[16],
//    output position_out[16],
//    output last_row_out[16]
    
  ) {
  
  .clk(clk){
    .rst(rst){
      dff player_score[16];
      dff player_level[16];
      dff player_row[16];
      dff player_position[16];
      dff mazeLastRow[16];
      dff temp_var[16];
    }
  }
  
  always {
    
    
    // write port
    if (write_enable){
      case(write_address){
        b0000 : player_score.d = write_data;
        b0001 : player_level.d = write_data;
        b0010 : player_row.d = write_data;
        b0011 : player_position.d = write_data;
        b0100 : mazeLastRow.d = write_data;
        b0111 : temp_var.d = write_data;
      }
      
      //read port a
      case(read_address_a){
        b0000 : read_data_a = player_score.q;
        b0001 : read_data_a = player_level.q;
        b0010 : read_data_a = player_row.q;
        b0011 : read_data_a = player_position.q;
        b0100 : read_data_a = mazeLastRow.q;
        b0111 : read_data_a = temp_var.q;
        default : read_data_a = 0;
      }
      
      //read port b
      case(read_address_b){
        b0000 : read_data_b = player_score.q;
        b0001 : read_data_b = player_level.q;
        b0010 : read_data_b = player_row.q;
        b0011 : read_data_b = player_position.q;
        b0100 : read_data_b = mazeLastRow.q;
        b0111 : read_data_b = temp_var.q;
        default : read_data_b = 0;
      }
      
      //For debugging
//      score_out = player_score.q;
//      level_out = player_level.q;
//      row_out = player_row.q;
//      position_out = player_position.q;
//      last_row_out = mazeLastRow.q;
    }
}