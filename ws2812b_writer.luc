module ws2812b_writer #(
    PIXEL_COUNT = 64 : PIXEL_COUNT > 0  		// The number of LEDs in the chain.
  )(
    input clk,  // clock
    input rst,  // reset
    input update, // feed '1' to enable this strip
    // WS2812B expects the first 8 bits sent to be G, then R (next 8), then B (next next 8)
    // Hence, we need to pack the 8 bits for G in the lower bits, then R, then B as the highest 8 bits in Lucid
    // 24-bit color: B0 B1 B2 B3 B4 B5 B6 B7 R0 R1 R2 R3 R4 R5 R6 R7 G0 G1 G2 G3 G4 G5 G6 G7 
    // Note that the high bit is B7, and the low bit is B0 for the 8-bit color BLUE (same with red and green)
    // eg: if you want the color NAVY, you will find that B should be 0x80. This means B7 is 1 and you need to flip it in BINARY for Lucid to work, effectively having 0x01 for BLUE part.
    input color[24],   			// BRG, 8 bits each, color to render for all LED
    output pixel[$clog2(PIXEL_COUNT)],  // Index of the LED, with the color in color[24]
    output led		//Goes to the first LED in the chain

  ) {
  
  .clk(clk) {
    .rst(rst) {
      fsm state = {SEND_PIXEL, RESET};
      dff pixel_ctr[$clog2(PIXEL_COUNT)];
      dff bit_ctr[5];
      dff ctr[7];
      dff rst_ctr [$clog2(5000)]; //reset requires 50us of zeroes 
    }
  }
  
  always {
    led = 0;
    
    pixel = pixel_ctr.q;
    case (state.q) {
      state.SEND_PIXEL:
        if (color[bit_ctr.q]) //if current bit is HIGH, send 80 1's and 45 0's
          led = ctr.q < 80;
        else //if current bit is LOW, send 40 1's, and 85 0's
          led = ctr.q < 40;
        
        ctr.d = ctr.q + 1;
        if (ctr.q == 125){ //check if you can send next bit 
          ctr.d = 0;
          
          bit_ctr.d = bit_ctr.q + 1;
          if (bit_ctr.q == 23) { //check if you have sent all 24 bits 
            bit_ctr.d = 0;
            pixel_ctr.d = pixel_ctr.q + 1;
              
            if (pixel_ctr.q == PIXEL_COUNT-1) { //check if you have sent data to all LEDs
              pixel_ctr.d = 0;
              state.d = state.RESET;
            }
          }
        }
      
      state.RESET:
        if (&rst_ctr.q) { // if contents of rst_ctr.q is all 1
          if (update) {
            rst_ctr.d = 0;
            state.d = state.SEND_PIXEL; //send again
          }
        } else {
          rst_ctr.d = rst_ctr.q + 1;
        }
    }
  }
}