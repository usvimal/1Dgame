module game_Control_Unit (
    input clk,  // clock
    input rst,  // reset
    input left_button,
    input right_button,
    
    input player_position_in[16],
    input ra_data[16],
    input player_row[16],
    input player_level[16],
    
    output alufn[6],
    output asel[3],
    output bsel[3],
    output wdsel[2],
    output we_regfile,
    output regfile_write_address[4],
    output regfile_read_address_a[4],
    output regfile_read_address_b[4],
    output decimal_counter_increase,
    output decimal_counter_rst,
    output screen_output[64][24],
    output mazeLastRow[16],
    
    //DEBUG
    output state_number
  )
  
  {
  const LEVEL1_SIZE = 26;
  const LEVEL2_SIZE = 25;
  const LEVEL3_SIZE = 24;
  const PAUSE_SIZE = 28;
  
  const ADD = b000000;
  const SUB = b000001;
  const MUL = b000010;
  const DIV = b000011;
  const NOTA = b010000;
  const NOTB = b010010;
  const XNOR = b010100;
  const XOR = b010110;
  const AND = b011000;
  const A = b011010;
  const B = b011100;
  const OR = b011110;
  const SHL = b100000;
  const SHR = b100001;
  const SRA = b100011;
  const CMPEQ = b110011;
  const CMPLT = b110101;
  const CMPLE = b110111;
  const REDXOR = b010111;
  
  
  .clk(clk){
    fsm main_game={
      IDLE,
      START,
      CHECK_LEFT,
      CHECK_RIGHT,
      BRANCH_LEFT,
      BRANCH_RIGHT,
      PLAYER_LEFT,
      PLAYER_RIGHT,
      COIN_COLLISION,
      CHECK_COIN,
      BRANCH_COIN,
      LEFT_SHIFT_8, // for obstacle check
      OBSTACLE_COLLISION,
      CHECK_OBSTACLE,
      BRANCH_OBSTACLE,
      ROW_CHECK,
      ROW_BRANCH,
      LEVEL_CHECK,
      LEVEL_BRANCH,
      INTERMISSION_CHECK,
      NEXT_ROW,
      NEXT_LEVEL,
      RESET_ROW,
      PAUSE
    };
    edge_detector slowClockEdgeLevel1(#RISE(1), #FALL(0));
    edge_detector slowClockPauseEdge(#RISE(1), #FALL(0));
    edge_detector slowClockEdgeLevel2(#RISE(1), #FALL(0));
    edge_detector slowClockEdgeLevel3(#RISE(1), #FALL(0));
    
    .rst(rst){
      rom rom;
      rom_decoder rom_decoder;
      counter slowClockLevel1(#SIZE(LEVEL1_SIZE));
      counter slowClockLevel2(#SIZE(LEVEL2_SIZE));
      counter slowClockLevel3(#SIZE(LEVEL3_SIZE));
      counter slowClockPause(#SIZE(PAUSE_SIZE));
      
    }
  }
  
  always {
    slowClockEdgeLevel1.in = slowClockLevel1.value[LEVEL1_SIZE-1];
    slowClockEdgeLevel2.in = slowClockLevel2.value[LEVEL2_SIZE-1];
    slowClockEdgeLevel3.in = slowClockLevel3.value[LEVEL3_SIZE-1];
    
    slowClockPauseEdge.in = slowClockPause.value[PAUSE_SIZE-1];
    
    
    alufn = 0;
    asel = 0;
    bsel = 0;
    wdsel = 0;
    we_regfile = 0;
    regfile_write_address = b1111;
    regfile_read_address_a = b1111;
    regfile_read_address_b = b0000;
    
    // rom decoder inputs & outputs
    rom_decoder.rom_maze = rom.out;
    rom_decoder.player_pos = player_position_in;
    screen_output = rom_decoder.out;
    mazeLastRow = rom.out[0];
    
    // rom input
    rom.player_row = player_row;
    rom.player_level = player_level;
    
    decimal_counter_increase = 0;
    decimal_counter_rst = 0;
    
    
    //debug
    state_number = b00000000;
    
    if (rst){
      main_game.d = main_game.IDLE;
    }
    
    case(main_game.q){
      
      main_game.IDLE:
        state_number = b00000001;
        
        if (left_button | right_button) {
          main_game.d = main_game.START;
        }
        
        else {
          main_game.d = main_game.IDLE;
        }
      
      main_game.START:
        regfile_write_address = b0101;
        we_regfile =1;
        wdsel = b11;
        state_number = b00000010;
        
        if (left_button) {
          main_game.d = main_game.CHECK_LEFT;
        }
        
        if (right_button) {
          main_game.d = main_game.CHECK_RIGHT;
        }
        
        if (player_level == 1 && slowClockEdgeLevel1.out == b1) {
          main_game.d = main_game.COIN_COLLISION;}
        
        if (player_level == 3 && slowClockEdgeLevel2.out == b1) {
          main_game.d = main_game.COIN_COLLISION;}
        
        if (player_level == 5 && slowClockEdgeLevel3.out == b1) {
          main_game.d = main_game.COIN_COLLISION;
          
        }
      
      
      
      main_game.CHECK_LEFT:
        alufn = CMPLT;
        regfile_read_address_a = b100;
        asel= b00;
        bsel = b10;
        we_regfile= 1;
        regfile_write_address= b1111;
        wdsel = b00;
        
        main_game.d = main_game.BRANCH_LEFT;
      
      main_game.CHECK_RIGHT:
        alufn = CMPLT;
        regfile_read_address_b = b100;
        asel= b01;
        bsel = b00;
        we_regfile= 1;
        wdsel = b00;
        regfile_write_address= b1111;
        
        main_game.d = main_game.BRANCH_RIGHT;
      
      main_game.BRANCH_LEFT:
        regfile_read_address_a = b1111;
        if (ra_data[0]) {
          main_game.d = main_game.PLAYER_LEFT;
        }
        else {main_game.d = main_game.START;}
      
      main_game.BRANCH_RIGHT:
        regfile_read_address_a = b1111;
        if (ra_data[0]) {
          main_game.d = main_game.PLAYER_RIGHT;
        }
        
        else {main_game.d = main_game.START;}
      
      main_game.PLAYER_LEFT:
        alufn = SHL;                             // SHL
        regfile_read_address_a = b0100;              // counter reg
        asel = b00;                                  // Read Address A
        bsel = b01;                                  // constant 1
        we_regfile = 1;
        wdsel = b00;
        regfile_write_address = b0100;                     //counter reg
        state_number = b00000011;
        
        main_game.d = main_game.START;
      
      
      main_game.PLAYER_RIGHT:
        alufn = SHR;                             //SHR
        regfile_read_address_a = b0100;              // counter reg
        asel = b00;                                  // Read Address A
        bsel = b01;                                  // constant 1
        we_regfile = 1;
        wdsel = b00;
        regfile_write_address = b0100;                     //counter reg
        state_number = b00000100;
        
        main_game.d = main_game.START;
      
      main_game.COIN_COLLISION:
        alufn = AND;
        asel= b00;
        bsel = b00;
        we_regfile= 1;
        regfile_write_address= b1111;
        regfile_read_address_a = b0100;
        regfile_read_address_b = b0101;
        wdsel = b00;
        
        main_game.d = main_game.CHECK_COIN;
      
      main_game.CHECK_COIN:
        alufn = REDXOR;
        asel= b00;
        we_regfile= 1;
        regfile_write_address= b1111;
        regfile_read_address_a = b1111;
        wdsel = b00;
        
        main_game.d = main_game.BRANCH_COIN;
      
      main_game.BRANCH_COIN:
        regfile_read_address_a = b1111;
        if (ra_data[0]) {decimal_counter_increase = 1;}
        
        main_game.d = main_game.LEFT_SHIFT_8;
      
      main_game.LEFT_SHIFT_8:
        alufn = SHL;
        asel = b00;
        bsel = b11;
        we_regfile= 1;
        regfile_write_address= b1111;
        regfile_read_address_a = b0100;
        wdsel = b00;
        
        main_game.d = main_game.OBSTACLE_COLLISION;
      
      
      main_game.OBSTACLE_COLLISION:
        alufn = AND;
        asel = b00;
        bsel = b00;
        we_regfile= 1;
        regfile_write_address = b1111;
        regfile_read_address_a = b1111;
        regfile_read_address_b = b0101;
        wdsel = b00;
        
        main_game.d = main_game.CHECK_OBSTACLE;
      
      main_game.CHECK_OBSTACLE:
        alufn = REDXOR;
        asel = b00;
        we_regfile = 1;
        regfile_write_address = b1111;
        regfile_read_address_a = b1111;
        wdsel = b00;
        
        main_game.d = main_game.BRANCH_OBSTACLE;
      
      
      main_game.BRANCH_OBSTACLE:
        regfile_read_address_a = b1111;
        if (ra_data[0]) {main_game.d = main_game.LEVEL_CHECK;}
        else {main_game.d = main_game.ROW_CHECK;}
      
      main_game.ROW_CHECK:
        alufn = CMPLE;
        asel= b11;
        bsel = b00;
        we_regfile= 1;
        regfile_write_address= b1111;
        regfile_read_address_b = b0010;
        wdsel = b00;
        
        main_game.d = main_game.ROW_BRANCH;
      
      main_game.ROW_BRANCH:
        regfile_read_address_a = b1111;
        if (ra_data[0]) {main_game.d = main_game.LEVEL_CHECK;}
        else {main_game.d = main_game.NEXT_ROW;}
      
      main_game.LEVEL_CHECK:                             // Make sure level < 5
        alufn = CMPLE;
        asel = b10;
        bsel = b00;
        we_regfile= 1;
        regfile_write_address = b1111;
        regfile_read_address_b = b0011;
        wdsel = b00;
        
        main_game.d = main_game.LEVEL_BRANCH;
      
      main_game.LEVEL_BRANCH:
        regfile_read_address_a = b1111;
        if (ra_data[0]) {main_game.d = main_game.IDLE;}
        else {main_game.d = main_game.NEXT_LEVEL;}
      
      main_game.NEXT_ROW:
        alufn = ADD;
        asel= b00;
        bsel = b01;
        we_regfile = 1;
        regfile_write_address = b0010;
        regfile_read_address_a = b0010;
        wdsel = b00;
        
        main_game.d = main_game.START;
      
      main_game.NEXT_LEVEL:
        alufn = ADD;
        asel= b00;
        bsel = b01;
        we_regfile = 1;
        regfile_write_address = b0011;
        regfile_read_address_a = b0011;
        wdsel = b00;
        
        main_game.d = main_game.RESET_ROW;
      
      main_game.RESET_ROW:
        we_regfile = 1;
        regfile_write_address = b0010;
        wdsel = b01;
        
        main_game.d = main_game.INTERMISSION_CHECK;
      
      
      main_game.INTERMISSION_CHECK:
        case(player_level) {
          2: main_game.d = main_game.PAUSE;
          4: main_game.d = main_game.PAUSE;
          3: main_game.d = main_game.START;
          5: main_game.d = main_game.START;
        }
      
      main_game.PAUSE:
        if (slowClockPauseEdge.out == b1) {
          main_game.d = main_game.NEXT_LEVEL;
        }
      
    }
  }
}